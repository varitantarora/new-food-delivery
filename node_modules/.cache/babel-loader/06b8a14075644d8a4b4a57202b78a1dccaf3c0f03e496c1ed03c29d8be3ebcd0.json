{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n//create slice is a function that takes a configuration to create the slice\n\nconst Cardslice = createSlice({\n  name: \"cart\",\n  //initial state specifies what the slice named cart will contain initially, here we have specified that initially it will be empty\n  //initial stae is an object\n\n  initialState: {\n    items: []\n  },\n  //we write reducer functions corresponding to those actions,  //reducer is again an object\n  //actions are like small api to communicate with redux store   //actions->egs:  add an itemm, remove an item, clear the cart etc... \n  reducers: {\n    //action gets access to state and our action, and it modifies the state according to the action\n    addItem: (state, action) => {\n      state.items.push(action.payload);\n    },\n    removeItem: (state, action) => {\n      state.items.pop();\n    },\n    ClearCart: (state, action) => {\n      state.items.length = 0;\n    }\n  }\n});\nexport const {\n  addItem,\n  removeItem,\n  ClearCart\n} = createSlice.actions;\nexport default createSlice.reducers;","map":{"version":3,"names":["createSlice","Cardslice","name","initialState","items","reducers","addItem","state","action","push","payload","removeItem","pop","ClearCart","length","actions"],"sources":["/Users/mehakgupta/Downloads/InternFrontEnd/src/utlis/Cardslice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n//create slice is a function that takes a configuration to create the slice\n\nconst Cardslice = createSlice({\n  name: \"cart\",\n  //initial state specifies what the slice named cart will contain initially, here we have specified that initially it will be empty\n  //initial stae is an object\n\n  initialState: {\n    items: [],\n  },\n  //we write reducer functions corresponding to those actions,  //reducer is again an object\n  //actions are like small api to communicate with redux store   //actions->egs:  add an itemm, remove an item, clear the cart etc... \n  reducers: {\n    //action gets access to state and our action, and it modifies the state according to the action\n    addItem: (state, action) => {\n      state.items.push(action.payload);\n    },\n\n    removeItem : (state, action) =>{\n        state.items.pop()\n    },\n\n    ClearCart: (state, action) =>{\n        state.items.length = 0\n    },\n  },\n});\n\nexport const {addItem, removeItem, ClearCart} = createSlice.actions;\n\nexport default createSlice.reducers;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZ;EACA;;EAEAC,YAAY,EAAE;IACZC,KAAK,EAAE;EACT,CAAC;EACD;EACA;EACAC,QAAQ,EAAE;IACR;IACAC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACH,KAAK,CAACK,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC,CAAC;IAEDC,UAAU,EAAGA,CAACJ,KAAK,EAAEC,MAAM,KAAI;MAC3BD,KAAK,CAACH,KAAK,CAACQ,GAAG,CAAC,CAAC;IACrB,CAAC;IAEDC,SAAS,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAI;MACzBD,KAAK,CAACH,KAAK,CAACU,MAAM,GAAG,CAAC;IAC1B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAACR,OAAO;EAAEK,UAAU;EAAEE;AAAS,CAAC,GAAGb,WAAW,CAACe,OAAO;AAEnE,eAAef,WAAW,CAACK,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}