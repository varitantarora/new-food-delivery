{"ast":null,"code":"var _jsxFileName = \"/Users/mehakgupta/Downloads/InternFrontEnd/src/components/Protected.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Protected = props => {\n  _s();\n  const {\n    Component\n  } = props;\n  const [authenticated, setAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Retrieve user sign-in data from local storage\n    const signInData = localStorage.getItem(\"usersignin\");\n\n    // Check if sign-in data exists\n    if (signInData) {\n      const userData = JSON.parse(signInData);\n      const signEmail = userData.email;\n      const signpass = userData.password;\n\n      // Retrieve user login data from local storage\n      const loginData = localStorage.getItem(\"userlogindata\");\n\n      // Check if login data exists\n      if (loginData) {\n        const loginUserData = JSON.parse(loginData);\n        const loginEmail = loginUserData.email;\n        const loginpass = loginUserData.password;\n\n        // Check if the stored credentials match\n        if (signEmail === loginEmail && signpass === loginpass) {\n          setAuthenticated(true);\n        } else {\n          // If credentials do not match, redirect to login page\n          navigate(\"/login\");\n        }\n      } else {\n        // If no login data is found, redirect to login page\n        navigate(\"/login\");\n      }\n    } else {\n      // If no sign-in data is found, redirect to login page\n      navigate(\"/login\");\n    }\n  }, [navigate]);\n\n  // Render the Component only if user is authenticated\n  return authenticated ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 28\n  }, this) : null;\n};\n_s(Protected, \"cMHCRxMkeyV75zcuty9NPKkUWfY=\", false, function () {\n  return [useNavigate];\n});\n_c = Protected;\nexport default Protected;\nvar _c;\n$RefreshReg$(_c, \"Protected\");","map":{"version":3,"names":["useEffect","useState","useNavigate","jsxDEV","_jsxDEV","Protected","props","_s","Component","authenticated","setAuthenticated","navigate","signInData","localStorage","getItem","userData","JSON","parse","signEmail","email","signpass","password","loginData","loginUserData","loginEmail","loginpass","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mehakgupta/Downloads/InternFrontEnd/src/components/Protected.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Protected = (props) => {\n    const { Component } = props;\n    const [authenticated, setAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Retrieve user sign-in data from local storage\n        const signInData = localStorage.getItem(\"usersignin\");\n        \n        // Check if sign-in data exists\n        if (signInData) {\n            const userData = JSON.parse(signInData);\n            const signEmail = userData.email;\n            const signpass = userData.password;\n\n            // Retrieve user login data from local storage\n            const loginData = localStorage.getItem(\"userlogindata\");\n            \n            // Check if login data exists\n            if (loginData) {\n                const loginUserData = JSON.parse(loginData);\n                const loginEmail = loginUserData.email;\n                const loginpass = loginUserData.password;\n\n                // Check if the stored credentials match\n                if (signEmail === loginEmail && signpass === loginpass) {\n                    setAuthenticated(true);\n                } else {\n                    // If credentials do not match, redirect to login page\n                    navigate(\"/login\");\n                }\n            } else {\n                // If no login data is found, redirect to login page\n                navigate(\"/login\");\n            }\n        } else {\n            // If no sign-in data is found, redirect to login page\n            navigate(\"/login\");\n        }\n    }, [navigate]);\n\n    // Render the Component only if user is authenticated\n    return authenticated ? <Component /> : null;\n};\n\nexport default Protected;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAU,CAAC,GAAGF,KAAK;EAC3B,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;;IAErD;IACA,IAAIF,UAAU,EAAE;MACZ,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;MACvC,MAAMM,SAAS,GAAGH,QAAQ,CAACI,KAAK;MAChC,MAAMC,QAAQ,GAAGL,QAAQ,CAACM,QAAQ;;MAElC;MACA,MAAMC,SAAS,GAAGT,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;;MAEvD;MACA,IAAIQ,SAAS,EAAE;QACX,MAAMC,aAAa,GAAGP,IAAI,CAACC,KAAK,CAACK,SAAS,CAAC;QAC3C,MAAME,UAAU,GAAGD,aAAa,CAACJ,KAAK;QACtC,MAAMM,SAAS,GAAGF,aAAa,CAACF,QAAQ;;QAExC;QACA,IAAIH,SAAS,KAAKM,UAAU,IAAIJ,QAAQ,KAAKK,SAAS,EAAE;UACpDf,gBAAgB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACH;UACAC,QAAQ,CAAC,QAAQ,CAAC;QACtB;MACJ,CAAC,MAAM;QACH;QACAA,QAAQ,CAAC,QAAQ,CAAC;MACtB;IACJ,CAAC,MAAM;MACH;MACAA,QAAQ,CAAC,QAAQ,CAAC;IACtB;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,OAAOF,aAAa,gBAAGL,OAAA,CAACI,SAAS;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,GAAG,IAAI;AAC/C,CAAC;AAACtB,EAAA,CA3CIF,SAAS;EAAA,QAGMH,WAAW;AAAA;AAAA4B,EAAA,GAH1BzB,SAAS;AA6Cf,eAAeA,SAAS;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}