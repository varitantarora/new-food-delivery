{"ast":null,"code":"var _jsxFileName = \"/Users/mehakgupta/Downloads/InternFrontEnd/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Cart from \"./components/Cart\";\nimport Error from \"./components/Error\";\nimport Body from \"./components/Body\";\nimport Protected from \"./components/Protected\";\nimport Login from \"./components/Login\";\nimport Menu from \"./components/Menu\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isAuthenticated = () => {\n  // Your authentication logic goes here\n  // For example, you could check if the user is logged in by examining authentication tokens, session cookies, etc.\n  // Return true if the user is authenticated, false otherwise\n  return true; // Placeholder value, you need to implement this logic\n};\n\n// ProtectedRoute component to render a route only if the user is authenticated\nconst ProtectedRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  ...rest,\n  render: props => isAuthenticated() ? /*#__PURE__*/_jsxDEV(Component, {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 3\n}, this);\n_c = ProtectedRoute;\nconst appRouter = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 14\n  }, this),\n  children: [{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/About\",\n    element: /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/Contact\",\n    element: /*#__PURE__*/_jsxDEV(Contact, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"/restaurant\",\n    element: /*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 19\n    }, this)\n  }, {\n    path: '/Login',\n    element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 19\n    }, this)\n  }, {\n    path: \"/Cart\",\n    element: /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this)\n  },\n  // dynamic routing to open menu page for each restaurant\n  {\n    path: '/restaurant/:id',\n    element: /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }, this)\n  }],\n  errorElement: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 19\n  }, this)\n}]);\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: appRouter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 80,\n  columnNumber: 3\n}, this));\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","ReactDOM","App","About","Contact","Cart","Error","Body","Protected","Login","Menu","reportWebVitals","createBrowserRouter","RouterProvider","jsxDEV","_jsxDEV","isAuthenticated","ProtectedRoute","component","Component","rest","Route","render","props","fileName","_jsxFileName","lineNumber","columnNumber","Redirect","to","_c","appRouter","path","element","children","errorElement","root","createRoot","document","getElementById","StrictMode","router","$RefreshReg$"],"sources":["/Users/mehakgupta/Downloads/InternFrontEnd/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport About from \"./components/About\";\nimport Contact from \"./components/Contact\";\nimport Cart from \"./components/Cart\";\nimport Error from \"./components/Error\";\nimport Body from \"./components/Body\";\nimport Protected from \"./components/Protected\";\nimport Login from \"./components/Login\";\nimport Menu from \"./components/Menu\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\n\nconst isAuthenticated = () => {\n  // Your authentication logic goes here\n  // For example, you could check if the user is logged in by examining authentication tokens, session cookies, etc.\n  // Return true if the user is authenticated, false otherwise\n  return true; // Placeholder value, you need to implement this logic\n};\n\n// ProtectedRoute component to render a route only if the user is authenticated\nconst ProtectedRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) =>\n      isAuthenticated() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to=\"/login\" />\n      )\n    }\n  />\n);\nconst appRouter = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <App />,\n    children: [\n      {\n        path: \"/\",\n        element: < Body/>\n      },\n      {\n        path: \"/About\",\n        element: <About />,\n      },\n      {\n        path: \"/Contact\",\n        element: <Contact />,\n      },\n      {\n        path: \"/restaurant\",\n        element : <Body />\n      },\n      {\n        path : '/Login',\n        element : < Login />\n              },\n      {\n        path: \"/Cart\",\n        element : <Cart />\n\n      },\n      // dynamic routing to open menu page for each restaurant\n      {\n        path : '/restaurant/:id',\n        element : <Menu/>\n      },\n\n      \n    ],\n    errorElement: <Error />,\n  },\n]);\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={appRouter} />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}