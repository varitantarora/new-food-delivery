{"ast":null,"code":"// import { useEffect , useState } from \"react\";\n// import { useNavigate} from \"react-router-dom\";\n// const Protected = (props) => {\n//     const { Component } = props;\n//     const [authenticated, setAuthenticated] = useState(false);\n//     const navigate = useNavigate();\n// useEffect(() => {\n//     const getData = localStorage.getItem(\"usersignin\");\n//     const userData = JSON.parse(getData);\n//   const signEmail = userData.email;\n//   const signpass = userData.password;\n//   const LoginData = localStorage.getItem(\"userlogindata\");\n//   const Data = JSON.parse(LoginData);\n//   const loginEmail = Data.email;\n//   const loginpass = Data.password;\n// if(signEmail && signpass){\n//     if (\n//         signEmail === loginEmail &&\n//         signpass === loginpass\n//     ) {\n//         // If credentials match, set authenticated to true\n//         setAuthenticated(true);\n//     } else {\n//         // If credentials do not match, redirect to login page\n//         navigate(\"/login\");\n//     }\n// }\n//  else {\n//     // If no username and password are stored, redirect to login page\n//     navigate(\"/Login\");\n// }\n// }, []);\n//     // Render the Component only if user is logged in\n//     return (\n//         <div>\n//             <Component />\n//         </div>\n//     );\n// };\n// export default Protected;\nimport{useEffect,useState}from\"react\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";const Protected=props=>{const{Component}=props;const[authenticated,setAuthenticated]=useState(false);const navigate=useNavigate();useEffect(()=>{// Retrieve user sign-in data from local storage\nconst signInData=localStorage.getItem(\"usersignin\");// Check if sign-in data exists\nif(signInData){const userData=JSON.parse(signInData);const signEmail=userData.email;const signpass=userData.password;// Retrieve user login data from local storage\nconst loginData=localStorage.getItem(\"userlogindata\");// Check if login data exists\nif(loginData){const loginUserData=JSON.parse(loginData);const loginEmail=loginUserData.email;const loginpass=loginUserData.password;// Check if the stored credentials match\nif(signEmail===loginEmail&&signpass===loginpass){setAuthenticated(true);}else{// If credentials do not match, redirect to login page\nnavigate(\"/login\");}}else{// If no login data is found, redirect to login page\nnavigate(\"/login\");}}else{// If no sign-in data is found, redirect to login page\nnavigate(\"/login\");}},[navigate]);// Render the Component only if user is authenticated\nreturn authenticated?/*#__PURE__*/_jsx(Component,{}):null;};export default Protected;","map":{"version":3,"names":["useEffect","useState","useNavigate","jsx","_jsx","Protected","props","Component","authenticated","setAuthenticated","navigate","signInData","localStorage","getItem","userData","JSON","parse","signEmail","email","signpass","password","loginData","loginUserData","loginEmail","loginpass"],"sources":["/Users/mehakgupta/Downloads/InternFrontEnd/src/components/Protected.js"],"sourcesContent":["// import { useEffect , useState } from \"react\";\n// import { useNavigate} from \"react-router-dom\";\n\n// const Protected = (props) => {\n\n//     const { Component } = props;\n//     const [authenticated, setAuthenticated] = useState(false);\n//     const navigate = useNavigate();\n\n// useEffect(() => {\n\n//     const getData = localStorage.getItem(\"usersignin\");\n//     const userData = JSON.parse(getData);\n//   const signEmail = userData.email;\n//   const signpass = userData.password;\n\n//   const LoginData = localStorage.getItem(\"userlogindata\");\n//   const Data = JSON.parse(LoginData);\n//   const loginEmail = Data.email;\n//   const loginpass = Data.password;\n\n\n// if(signEmail && signpass){\n//     if (\n//         signEmail === loginEmail &&\n//         signpass === loginpass\n//     ) {\n//         // If credentials match, set authenticated to true\n//         setAuthenticated(true);\n//     } else {\n//         // If credentials do not match, redirect to login page\n//         navigate(\"/login\");\n//     }\n// }\n  \n//  else {\n//     // If no username and password are stored, redirect to login page\n//     navigate(\"/Login\");\n// }\n\n\n// }, []);\n\n    \n\n\n\n//     // Render the Component only if user is logged in\n//     return (\n//         <div>\n//             <Component />\n//         </div>\n//     );\n// };\n\n// export default Protected;\n\n\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Protected = (props) => {\n    const { Component } = props;\n    const [authenticated, setAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Retrieve user sign-in data from local storage\n        const signInData = localStorage.getItem(\"usersignin\");\n        \n        // Check if sign-in data exists\n        if (signInData) {\n            const userData = JSON.parse(signInData);\n            const signEmail = userData.email;\n            const signpass = userData.password;\n\n            // Retrieve user login data from local storage\n            const loginData = localStorage.getItem(\"userlogindata\");\n            \n            // Check if login data exists\n            if (loginData) {\n                const loginUserData = JSON.parse(loginData);\n                const loginEmail = loginUserData.email;\n                const loginpass = loginUserData.password;\n\n                // Check if the stored credentials match\n                if (signEmail === loginEmail && signpass === loginpass) {\n                    setAuthenticated(true);\n                } else {\n                    // If credentials do not match, redirect to login page\n                    navigate(\"/login\");\n                }\n            } else {\n                // If no login data is found, redirect to login page\n                navigate(\"/login\");\n            }\n        } else {\n            // If no sign-in data is found, redirect to login page\n            navigate(\"/login\");\n        }\n    }, [navigate]);\n\n    // Render the Component only if user is authenticated\n    return authenticated ? <Component /> : null;\n};\n\nexport default Protected;\n"],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,WAAW,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE/C,KAAM,CAAAC,SAAS,CAAIC,KAAK,EAAK,CACzB,KAAM,CAAEC,SAAU,CAAC,CAAGD,KAAK,CAC3B,KAAM,CAACE,aAAa,CAAEC,gBAAgB,CAAC,CAAGR,QAAQ,CAAC,KAAK,CAAC,CACzD,KAAM,CAAAS,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAE9BF,SAAS,CAAC,IAAM,CACZ;AACA,KAAM,CAAAW,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAErD;AACA,GAAIF,UAAU,CAAE,CACZ,KAAM,CAAAG,QAAQ,CAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,CACvC,KAAM,CAAAM,SAAS,CAAGH,QAAQ,CAACI,KAAK,CAChC,KAAM,CAAAC,QAAQ,CAAGL,QAAQ,CAACM,QAAQ,CAElC;AACA,KAAM,CAAAC,SAAS,CAAGT,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAEvD;AACA,GAAIQ,SAAS,CAAE,CACX,KAAM,CAAAC,aAAa,CAAGP,IAAI,CAACC,KAAK,CAACK,SAAS,CAAC,CAC3C,KAAM,CAAAE,UAAU,CAAGD,aAAa,CAACJ,KAAK,CACtC,KAAM,CAAAM,SAAS,CAAGF,aAAa,CAACF,QAAQ,CAExC;AACA,GAAIH,SAAS,GAAKM,UAAU,EAAIJ,QAAQ,GAAKK,SAAS,CAAE,CACpDf,gBAAgB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACH;AACAC,QAAQ,CAAC,QAAQ,CAAC,CACtB,CACJ,CAAC,IAAM,CACH;AACAA,QAAQ,CAAC,QAAQ,CAAC,CACtB,CACJ,CAAC,IAAM,CACH;AACAA,QAAQ,CAAC,QAAQ,CAAC,CACtB,CACJ,CAAC,CAAE,CAACA,QAAQ,CAAC,CAAC,CAEd;AACA,MAAO,CAAAF,aAAa,cAAGJ,IAAA,CAACG,SAAS,GAAE,CAAC,CAAG,IAAI,CAC/C,CAAC,CAED,cAAe,CAAAF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}