{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";//create slice is a function that takes a configuration to create the slice\nconst cartSlice=createSlice({name:\"cart\",//initial state specifies what the slice named cart will contain initially, here we have specified that initially it will be empty\n//initial stae is an object\ninitialState:{items:[]},//we write reducer functions corresponding to those actions,  //reducer is again an object\n//actions are like small api to communicate with redux store   //actions->egs:  add an itemm, remove an item, clear the cart etc... \nreducers:{//action gets access to state and our action, and it modifies the state according to the action\naddItem:(state,action)=>{//mutating the state , we are directly modifying our state\nstate.items.push(action.payload);},removeItem:(state,action)=>{state.items.pop();},ClearCart:(state,action)=>{state.items.length=0;}}});//cartSLice will return objects such as  actions and reducers \nexport const{addItem,removeItem,ClearCart}=cartSlice.actions;export default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","reducers","addItem","state","action","push","payload","removeItem","pop","ClearCart","length","actions","reducer"],"sources":["/Users/mehakgupta/Downloads/InternFrontEnd/src/utlis/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n//create slice is a function that takes a configuration to create the slice\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  //initial state specifies what the slice named cart will contain initially, here we have specified that initially it will be empty\n  //initial stae is an object\n\n  initialState: {\n    items: [],\n  },\n  //we write reducer functions corresponding to those actions,  //reducer is again an object\n  //actions are like small api to communicate with redux store   //actions->egs:  add an itemm, remove an item, clear the cart etc... \n  reducers: {\n    //action gets access to state and our action, and it modifies the state according to the action\n    addItem: (state, action) => {\n        //mutating the state , we are directly modifying our state\n        \n      state.items.push(action.payload);\n    },\n\n    removeItem : (state, action) =>{\n        state.items.pop()\n    },\n\n    ClearCart: (state, action) =>{\n        state.items.length = 0\n    },\n  },\n});\n\n\n//cartSLice will return objects such as  actions and reducers \n\nexport const {addItem, removeItem, ClearCart} = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C;AAEA,KAAM,CAAAC,SAAS,CAAGD,WAAW,CAAC,CAC5BE,IAAI,CAAE,MAAM,CACZ;AACA;AAEAC,YAAY,CAAE,CACZC,KAAK,CAAE,EACT,CAAC,CACD;AACA;AACAC,QAAQ,CAAE,CACR;AACAC,OAAO,CAAEA,CAACC,KAAK,CAAEC,MAAM,GAAK,CACxB;AAEFD,KAAK,CAACH,KAAK,CAACK,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,CAClC,CAAC,CAEDC,UAAU,CAAGA,CAACJ,KAAK,CAAEC,MAAM,GAAI,CAC3BD,KAAK,CAACH,KAAK,CAACQ,GAAG,CAAC,CAAC,CACrB,CAAC,CAEDC,SAAS,CAAEA,CAACN,KAAK,CAAEC,MAAM,GAAI,CACzBD,KAAK,CAACH,KAAK,CAACU,MAAM,CAAG,CAAC,CAC1B,CACF,CACF,CAAC,CAAC,CAGF;AAEA,MAAO,MAAM,CAACR,OAAO,CAAEK,UAAU,CAAEE,SAAS,CAAC,CAAGZ,SAAS,CAACc,OAAO,CAEjE,cAAe,CAAAd,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}